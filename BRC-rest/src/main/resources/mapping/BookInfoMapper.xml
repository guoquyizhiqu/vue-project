<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.liu.dao.BookInfoMapper" >
  <resultMap id="BaseResultMap" type="com.liu.model.BookInfo" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="book_name" property="bookName" jdbcType="VARCHAR" />
    <result column="publisher" property="publisher" jdbcType="VARCHAR" />
    <result column="publish_time" property="publishTime" jdbcType="DATE" />
    <result column="author" property="author" jdbcType="VARCHAR" />
    <result column="price" property="price" jdbcType="REAL" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="book_type" property="bookType" jdbcType="VARCHAR" />
    <result column="creater" property="creater" jdbcType="VARCHAR" />
    <result column="borrowing_status" property="borrowingStatus" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, book_name, publisher, publish_time, author, price, create_time, update_time, 
    book_type, creater, borrowing_status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from book_info
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteById" parameterType="java.lang.String" >
    delete from book_info
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.liu.model.BookInfo" >
    insert into book_info (id, book_name, publisher,
      publish_time, author, price, 
      create_time, update_time, book_type, 
      creater, borrowing_status)
    values (#{id,jdbcType=VARCHAR}, #{bookName,jdbcType=VARCHAR}, #{publisher,jdbcType=VARCHAR}, 
      #{publishTime,jdbcType=DATE}, #{author,jdbcType=VARCHAR}, #{price,jdbcType=REAL}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{bookType,jdbcType=VARCHAR}, 
      #{creater,jdbcType=VARCHAR}, #{borrowingStatus,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.liu.model.BookInfo" >
    insert into book_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
        id,
      <if test="bookName != null" >
        book_name,
      </if>
      <if test="publisher != null" >
        publisher,
      </if>
      <if test="publishTime != null" >
        publish_time,
      </if>
      <if test="author != null" >
        author,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="bookType != null" >
        book_type,
      </if>
      <if test="creater != null" >
        creater,
      </if>
      <if test="borrowingStatus != null" >
        borrowing_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      UUID(),
      <if test="bookName != null" >
        #{bookName,jdbcType=VARCHAR},
      </if>
      <if test="publisher != null" >
        #{publisher,jdbcType=VARCHAR},
      </if>
      <if test="publishTime != null" >
        str_to_date(#{publishTime}, '%Y-%m-%d'),
      </if>
      <if test="author != null" >
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=REAL},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bookType != null" >
        #{bookType,jdbcType=VARCHAR},
      </if>
      <if test="creater != null" >
        #{creater,jdbcType=VARCHAR},
      </if>
      <if test="borrowingStatus != null" >
        #{borrowingStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="edit" parameterType="com.liu.model.BookInfo" >
    update book_info
    <set >
      <if test="bookName != null" >
        book_name = #{bookName,jdbcType=VARCHAR},
      </if>
      <if test="publisher != null" >
        publisher = #{publisher,jdbcType=VARCHAR},
      </if>
      <if test="publishTime != null" >
        publish_time = #{publishTime,jdbcType=DATE},
      </if>
      <if test="author != null" >
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=REAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bookType != null" >
        book_type = #{bookType,jdbcType=VARCHAR},
      </if>
      <if test="creater != null" >
        creater = #{creater,jdbcType=VARCHAR},
      </if>
      <if test="borrowingStatus != null" >
        borrowing_status = #{borrowingStatus,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.liu.model.BookInfo" >
    update book_info
    set book_name = #{bookName,jdbcType=VARCHAR},
      publisher = #{publisher,jdbcType=VARCHAR},
      publish_time = #{publishTime,jdbcType=DATE},
      author = #{author,jdbcType=VARCHAR},
      price = #{price,jdbcType=REAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      book_type = #{bookType,jdbcType=VARCHAR},
      creater = #{creater,jdbcType=VARCHAR},
      borrowing_status = #{borrowingStatus,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>

  <select id="selectAllBookInfo" resultMap="BaseResultMap">
    SELECT
      bi.id AS id,
      bi.book_name AS book_name,
      bi.publisher AS publisher,
      bi.publish_time AS publish_time,
      bi.author AS author,
      bi.price AS price,
      bi.create_time AS create_time,
      bi.update_time AS update_time,
      bi.creater AS creater,
      bi.borrowing_status AS borrowing_status,
      bt.name AS book_type
    FROM book_info bi LEFT JOIN book_type bt ON bi.book_type = bt.id
  </select>
</mapper>